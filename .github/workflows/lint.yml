name: golangci-lint

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  # Optional: write access to checks to allow linting status reporting
  checks: write

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # Optional: version of golangci-lint to use in form of v1.2.3 or `latest` to use the latest version
          version: latest

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # We recommend using a .golangci.yml file at the root of the repository.
          # The location of the configuration file can be changed by using --config=/path/to/config.yml
          # args: --timeout=30m

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true 

  mathrandom-linter:
    name: mathrandom-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      
      - name: Build mathrandom-linter
        run: |
          mkdir -p bin
          go build -o bin/mathrandom-linter ./cmd/mathrandom-linter/main.go
      
      - name: Run mathrandom-linter
        run: |
          ./bin/mathrandom-linter -dir=. -exempt-file=./configs/mathrandom-exempt.json
        
      - name: Check for Exemption Expiry
        run: |
          # Also run in strict mode to alert on expired exemptions (but don't fail the build)
          ./bin/mathrandom-linter -dir=. -exempt-file=./configs/mathrandom-exempt.json -strict || echo "WARNING: Some exemptions have expired. Please review configs/mathrandom-exempt.json"

  dnsleaks-linter:
    name: dnsleaks-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      
      - name: Build dnsleaks-linter
        run: |
          mkdir -p bin
          go build -o bin/dnsleaks-linter ./cmd/dnsleaks-linter/main.go
      
      - name: Run dnsleaks-linter
        run: |
          ./bin/dnsleaks-linter -dir=. -exempt-file=./configs/dnsleaks-exempt.json
        
      - name: Check for Exemption Expiry
        run: |
          # Also run in strict mode to alert on expired exemptions (but don't fail the build)
          ./bin/dnsleaks-linter -dir=. -exempt-file=./configs/dnsleaks-exempt.json -strict || echo "WARNING: Some exemptions have expired. Please review configs/dnsleaks-exempt.json"

  dnsleaks-tests:
    name: dnsleaks-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      
      - name: Run DNS leak integration tests
        run: |
          # Run specific DNS leak tests that don't require sudo privileges
          go test -v ./pkg/securedns/... -run 'TestSystemDNSResolverBlocked|TestSecureResolverWorks|TestHelperFunctionsPreventLeaks|TestDNSLeakMonitorPreventsDirectCalls'
      
      - name: Run DNS leak protection unit tests
        run: |
          # Run tests for DNS leak protection in the security package
          go test -v ./core/security/... -run 'TestDNSLeak' 