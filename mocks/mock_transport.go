// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gocircum/gocircum/core/transport (interfaces: Transport)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/mock_transport.go github.com/gocircum/gocircum/core/transport Transport
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	net "net"
	reflect "reflect"

	transport "github.com/gocircum/gocircum/core/transport"
	gomock "go.uber.org/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
	isgomock struct{}
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransport)(nil).Close))
}

// DialContext mocks base method.
func (m *MockTransport) DialContext(ctx context.Context, network string, ip net.IP, port int) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, network, ip, port)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext.
func (mr *MockTransportMockRecorder) DialContext(ctx, network, ip, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockTransport)(nil).DialContext), ctx, network, ip, port)
}

// GenerateDecoyTraffic mocks base method.
func (m *MockTransport) GenerateDecoyTraffic(ctx context.Context, targetIP net.IP, targetPort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDecoyTraffic", ctx, targetIP, targetPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDecoyTraffic indicates an expected call of GenerateDecoyTraffic.
func (mr *MockTransportMockRecorder) GenerateDecoyTraffic(ctx, targetIP, targetPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDecoyTraffic", reflect.TypeOf((*MockTransport)(nil).GenerateDecoyTraffic), ctx, targetIP, targetPort)
}

// GetFingerprint mocks base method.
func (m *MockTransport) GetFingerprint() transport.TransportFingerprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFingerprint")
	ret0, _ := ret[0].(transport.TransportFingerprint)
	return ret0
}

// GetFingerprint indicates an expected call of GetFingerprint.
func (mr *MockTransportMockRecorder) GetFingerprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFingerprint", reflect.TypeOf((*MockTransport)(nil).GetFingerprint))
}

// Listen mocks base method.
func (m *MockTransport) Listen(ctx context.Context, network, address string) (net.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", ctx, network, address)
	ret0, _ := ret[0].(net.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockTransportMockRecorder) Listen(ctx, network, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockTransport)(nil).Listen), ctx, network, address)
}

// SetObfuscationTarget mocks base method.
func (m *MockTransport) SetObfuscationTarget(target transport.ObfuscationTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObfuscationTarget", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetObfuscationTarget indicates an expected call of SetObfuscationTarget.
func (mr *MockTransportMockRecorder) SetObfuscationTarget(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObfuscationTarget", reflect.TypeOf((*MockTransport)(nil).SetObfuscationTarget), target)
}

// SupportsObfuscation mocks base method.
func (m *MockTransport) SupportsObfuscation() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsObfuscation")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsObfuscation indicates an expected call of SupportsObfuscation.
func (mr *MockTransportMockRecorder) SupportsObfuscation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsObfuscation", reflect.TypeOf((*MockTransport)(nil).SupportsObfuscation))
}
