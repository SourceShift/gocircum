// Code generated by MockGen. DO NOT EDIT.
// Source: gocircum/interfaces (interfaces: Engine)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/mock_engine.go gocircum/interfaces Engine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	config "gocircum/core/config"
	ranker "gocircum/core/ranker"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
	isgomock struct{}
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// GetBestStrategy mocks base method.
func (m *MockEngine) GetBestStrategy(ctx context.Context) (*config.Fingerprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestStrategy", ctx)
	ret0, _ := ret[0].(*config.Fingerprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBestStrategy indicates an expected call of GetBestStrategy.
func (mr *MockEngineMockRecorder) GetBestStrategy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestStrategy", reflect.TypeOf((*MockEngine)(nil).GetBestStrategy), ctx)
}

// GetStrategyByID mocks base method.
func (m *MockEngine) GetStrategyByID(id string) (*config.Fingerprint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrategyByID", id)
	ret0, _ := ret[0].(*config.Fingerprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStrategyByID indicates an expected call of GetStrategyByID.
func (mr *MockEngineMockRecorder) GetStrategyByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrategyByID", reflect.TypeOf((*MockEngine)(nil).GetStrategyByID), id)
}

// Start mocks base method.
func (m *MockEngine) Start(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEngineMockRecorder) Start(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEngine)(nil).Start), addr)
}

// StartProxyWithStrategy mocks base method.
func (m *MockEngine) StartProxyWithStrategy(ctx context.Context, addr string, fp *config.Fingerprint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProxyWithStrategy", ctx, addr, fp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProxyWithStrategy indicates an expected call of StartProxyWithStrategy.
func (mr *MockEngineMockRecorder) StartProxyWithStrategy(ctx, addr, fp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProxyWithStrategy", reflect.TypeOf((*MockEngine)(nil).StartProxyWithStrategy), ctx, addr, fp)
}

// Status mocks base method.
func (m *MockEngine) Status() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockEngineMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockEngine)(nil).Status))
}

// Stop mocks base method.
func (m *MockEngine) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockEngineMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEngine)(nil).Stop))
}

// TestStrategies mocks base method.
func (m *MockEngine) TestStrategies(ctx context.Context) ([]ranker.StrategyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestStrategies", ctx)
	ret0, _ := ret[0].([]ranker.StrategyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestStrategies indicates an expected call of TestStrategies.
func (mr *MockEngineMockRecorder) TestStrategies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestStrategies", reflect.TypeOf((*MockEngine)(nil).TestStrategies), ctx)
}
