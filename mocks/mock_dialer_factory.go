// Code generated by MockGen. DO NOT EDIT.
// Source: gocircum/core/engine (interfaces: DialerFactory)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../../mocks/mock_dialer_factory.go gocircum/core/engine DialerFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	config "gocircum/core/config"
	engine "gocircum/core/engine"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDialerFactory is a mock of DialerFactory interface.
type MockDialerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDialerFactoryMockRecorder
	isgomock struct{}
}

// MockDialerFactoryMockRecorder is the mock recorder for MockDialerFactory.
type MockDialerFactoryMockRecorder struct {
	mock *MockDialerFactory
}

// NewMockDialerFactory creates a new mock instance.
func NewMockDialerFactory(ctrl *gomock.Controller) *MockDialerFactory {
	mock := &MockDialerFactory{ctrl: ctrl}
	mock.recorder = &MockDialerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialerFactory) EXPECT() *MockDialerFactoryMockRecorder {
	return m.recorder
}

// NewDialer mocks base method.
func (m *MockDialerFactory) NewDialer(transportCfg *config.Transport, tlsCfg *config.TLS) (engine.Dialer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDialer", transportCfg, tlsCfg)
	ret0, _ := ret[0].(engine.Dialer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDialer indicates an expected call of NewDialer.
func (mr *MockDialerFactoryMockRecorder) NewDialer(transportCfg, tlsCfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDialer", reflect.TypeOf((*MockDialerFactory)(nil).NewDialer), transportCfg, tlsCfg)
}
