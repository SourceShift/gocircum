Excellent. This is a Product Requirements Document (PRD) formatted with clear, actionable sections, suitable for use in an AI-assisted IDE like Cursor. It provides the "what" and "why," allowing the AI to focus on generating the "how."

Product Requirements Document: gocircum Framework

Product: gocircum Censorship Circumvention Framework
Version: 1.0
Status: Scoping
Target Release: Q4 2024
Stakeholders: Digital Rights Activists, Open-Source Community, Citizens under Censorship

1. Overview & Vision

Vision: To empower individuals living under internet censorship with a resilient, adaptable, and user-friendly tool to access the global internet freely and securely.

Problem: State-level censorship systems use Deep Packet Inspection (DPI) to identify and block circumvention tools by fingerprinting their network traffic, particularly the initial TLS ClientHello message. Existing tools can be rigid and quickly become obsolete as censors adapt.

Solution: We will build gocircum, a modular framework composed of a core Go library and multiple frontends. This framework will allow for the rapid definition, testing, and deployment of new evasion techniques. It will serve both technical researchers testing the network and non-technical citizens needing a simple "one-click" solution.

2. Goals & Success Metrics
Goal	Metric
Empower Non-Technical Users	Achieve 10,000+ downloads of the mobile/desktop app within 6 months of launch.
Enable Technical Researchers	Be cited or used in at least 3 public analyses of state-level censorship.
Build a Resilient Framework	Support at least 10 distinct, configurable evasion strategies via YAML.
Foster Community Contribution	Receive at least 20 pull requests from community members (code or strategies).
3. User Personas
3.1. Parisa (Primary Persona)

Role: University student in Tehran.

Technical Skill: Low. Uses smartphones for social media, news, and education.

Frustration: Her existing VPN is unreliable, slow, and frequently stops working. She doesn't understand why, she just needs access to her course materials on YouTube and to communicate with friends abroad.

Needs: A mobile app with a single "Connect" button that just works. She needs it to be trustworthy and not drain her battery.

3.2. Kian (Secondary Persona)

Role: Expat Iranian software developer and digital rights activist.

Technical Skill: High. Proficient in networking, Go, and security analysis.

Frustration: The censor's rules change daily. He needs a tool to quickly probe which TLS fingerprints or packet fragmentation patterns are currently bypassing the firewall so he can advise his community.

Needs: A powerful command-line tool to script tests, analyze results, and define custom evasion strategies in a simple text file.

4. Product Requirements & Features

This section details the features required for the Minimum Viable Product (MVP).

FR-01: Core Circumvention Library (gocircum)

Description: A self-contained, headless Go library that provides all core functionality. This is the foundation of the entire project.

User Story: As Kian, I want to import a Go library into my own tools so I can build custom applications on top of a proven circumvention engine.

Acceptance Criteria:

The library must be importable as a standard Go module.

It must expose a clear, public API for starting, stopping, and getting the status of the engine.

The library must not contain any UI code or have dependencies on UI toolkits.

All core logic (networking, proxying, strategy execution) must reside within this library.

FR-02: Configurable Evasion Strategies

Description: The framework's behavior must be defined by an external configuration file, not by hardcoded logic. This allows for rapid adaptation.

User Story: As Kian, I want to define a new evasion strategy by editing a strategies.yaml file so I can test new techniques without recompiling the application.

Acceptance Criteria:

The system must load strategies from a YAML file (strategies.yaml).

The YAML schema must support:

A unique name for each strategy.

An enabled flag to easily toggle strategies.

A transport section specifying protocol: tcp or protocol: quic.

A tls section specifying library: go-stdlib | utls | uquic and a client_hello_id (e.g., HelloChrome_Auto).

The schema must support a list of middlewares for the transport, such as packet fragmentation.

Fragmentation middleware must be configurable with parameters for packet sizes and delays.

FR-03: Command-Line Interface (heybabe-cli)

Description: A feature-rich CLI for technical users to interact with the gocircum engine.

User Story: As Kian, I want to use a CLI to run a series of tests against my server and see a clear report of which strategies succeeded, so I can analyze the censor's behavior.

Acceptance Criteria:

The CLI must be a Go application that consumes the gocircum library.

It must support a test subcommand that runs all enabled strategies and prints a formatted table with results (Status, IP, Handshake Time).

It must support a proxy subcommand that starts a local SOCKS5 proxy.

The proxy command must use the "best" available strategy by default.

FR-04: Automated Strategy Ranking

Description: The engine must be able to automatically determine the most effective working strategy. This is crucial for the one-click user experience.

User Story: As Parisa, I want the app to figure out the best way to connect on its own, so I don't have to choose from a confusing list of servers or protocols.

Acceptance Criteria:

The gocircum library must contain a Ranker module.

On startup, the Ranker will silently test a list of strategies against a hardcoded, high-availability canary domain (e.g., www.cloudflare.com).

The Ranker must measure both success and handshake latency.

It must produce a sorted list of working strategies, from fastest to slowest.

The SOCKS5 proxy, when started without a specified strategy, must use the top-ranked strategy from this list.

FR-05: Mobile Library Bindings (gomobile)

Description: The core library must be consumable by native mobile applications.

User Story: As a mobile app developer for Parisa, I want to integrate a pre-compiled Go library (.aar/.xcframework) to handle all the complex circumvention logic, so I can focus on building a simple UI.

Acceptance Criteria:

The repository must contain a mobile package with a simplified wrapper API.

The wrapper API must expose StartEngine(configJSON, callback), StopEngine().

The callback mechanism must be used to send status updates (e.g., "Connecting", "Connected", "Error") from Go to the native UI layer.

The CI/CD pipeline must build and release the .aar and .xcframework artifacts.

FR-06: Simple Mobile GUI (Proof of Concept)

Description: A minimal but functional mobile app to serve the primary user persona, Parisa.

User Story: As Parisa, I want to open an app, press a big button, and have my internet work freely.

Acceptance Criteria:

The app must have a single main screen.

The screen must feature a large "Connect/Disconnect" button.

The screen must display a simple status text: Disconnected, Connecting..., Connected, Reconnecting..., Failed.

When "Connect" is pressed, the app must call the gocircum library to start the proxy and automatically configure the device to use this local proxy (using platform-specific VPN APIs).

When "Disconnect" is pressed, the device's proxy settings must be restored.

The app must bundle the strategies.yaml (as JSON) internally.

5. Non-Functional Requirements

NFR-01: Performance: The proxy must add less than 50ms of latency overhead for the connection handshake. CPU usage should be <5% on a modern smartphone when idle.

NFR-02: Security: No user-identifiable information should be logged. The code must be open-source and subject to public audit. Dependencies must be regularly scanned for vulnerabilities.

NFR-03: Platform Support:

CLI: Windows (amd64), macOS (amd64, arm64), Linux (amd64, arm64).

Mobile: Android API level 21+, iOS 12+.

NFR-04: Distribution: CLI and mobile library artifacts will be distributed via GitHub Releases. The mobile app will be distributed via trusted channels (e.g., a dedicated project website, Signal groups) to avoid app store censorship.

6. Out of Scope for MVP

Desktop GUI Application: A desktop version of the one-click app is a "fast follow" but not required for the initial release.

Complex Analytics: The app will not collect detailed usage analytics or telemetry.

Multiple Proxy Protocols: The built-in proxy will only support SOCKS5 for the MVP. HTTP proxy support can be added later.

Automatic Config Updates: The app will ship with a bundled config. A mechanism for automatically and securely updating the strategy list remotely is a future enhancement. 